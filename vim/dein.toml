# {{{ General plugins
[[plugins]]
repo = 'Shougo/dein.vim'
if = "g:Satisfy_vim_version(704) || has('nvim')"

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
timeout = 300
hook_post_update = '''
    let s:doc_dir = g:plugins_dir . expand('/repos/github.com/vim-jp/vimdoc-ja/doc')
    execute 'helptags' s:doc_dir
'''

[[plugins]]
repo = 'thinca/vim-singleton'
if = "has('gui_running')"
hook_source = '''
    call singleton#enable()
'''

[[plugins]]
repo = 'oka-h/load-indent.vim'

[[plugins]]
repo = 'thinca/vim-ambicmd'
if = "g:Satisfy_vim_version(703) || has('nvim')"
hook_add = '''
    cnoremap <expr> <Space> ambicmd#expand('<Space>')
'''

[[plugins]]
repo = 'romainl/vim-cool'
if = "g:Satisfy_vim_version(704, 2008) || has('nvim')"
# }}}

# {{{ Define command plugins
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
    nnoremap <silent> <C-P> :<C-U>CtrlPMRUFiles<CR>
    nnoremap <C-N> :<C-U>CtrlP<Space>

    let g:ctrlp_map = ''
    let g:ctrlp_regexp = 1
    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:50'
    let g:ctrlp_max_files = 200000
    let g:ctrlp_lazy_update = 1
    let g:ctrlp_brief_prompt = 1

    if executable('rg')
        let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    elseif executable('ag')
        let g:ctrlp_user_command = 'ag %s --nocolor --nogroup -g ""'
    endif
'''

[[plugins]]
repo = 'oka-h/ctrlp-grep.vim'
if = "g:Satisfy_vim_version(800, 1630) || has('nvim')"
depends = 'ctrlp.vim'
on_cmd = 'CtrlPGrep'
hook_add = '''
    if executable('rg')
        let g:ctrlpgrep_cmd = 'rg'
    elseif executable('ag')
        let g:ctrlpgrep_cmd = 'ag'
    endif

    let g:ctrlpgrep_highlight_enable = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-over'
if = 'g:Satisfy_vim_version(703)'
hook_add = '''
    cnoremap <expr> / <SID>replace_vim_over('/')

    let s:is_vim_over_replaced = 0

    augroup vimrc_remove_vim_over_cmd
        autocmd!
        autocmd User OverCmdLineEnter if s:is_vim_over_replaced
                                  \ |     call histdel(':', 'OverCommandLine')
                                  \ |     let s:is_vim_over_replaced = 0
                                  \ | endif
    augroup END

    let s:substitute_expr = "^\\s\\?\\(%\\|'<,'>\\)\\?\\s\\?s\\%[ubstitute]\\s\\?$"

    function! s:replace_vim_over(key) abort
        let s:is_vim_over_replaced = 1
        let l:cmdline = getcmdline()

        if getcmdtype() ==# ':' && getcmdpos() == len(l:cmdline) + 1 && l:cmdline =~# s:substitute_expr
            return "\<C-U>OverCommandLine\<CR>" . l:cmdline . a:key
        else
            return a:key
        endif
    endfunction
'''

[[plugins]]
repo = 'lambdalisue/suda.vim'
if = "executable('sudo')"
hook_post_source = '''
    if exists(':SudaRead') == 2
        delcommand SudaRead
    endif
'''

[[plugins]]
repo = 'thinca/vim-ref'
if = "g:Satisfy_vim_version(702) || has('nvim')"
depends = 'wwwrenderer-vim'
on_cmd = 'Ref'
hook_add = '''
    let g:ref_source_webdict_cmd = "=wwwrenderer#render('%s')"
    let g:ref_source_webdict_encoding = 'utf-8'
    let g:ref_source_webdict_use_cache = 1

    function! s:remove_wasted_blank_lines(text) abort
        let l:text = substitute(a:text, '^\n\+', '', '')
        let l:text = substitute(l:text, '\n\{3,}', '\n\n', 'g')
        return l:text
    endfunction

    let g:ref_source_webdict_sites = {
    \   'alc' : {
    \       'url' : 'https://eow.alc.co.jp/search?q=%s',
    \       'line' : 81
    \    },
    \    'weblio' : {
    \       'url' : 'https://ejje.weblio.jp/content/%s',
    \       'filter' : funcref('s:remove_wasted_blank_lines'),
    \       'line' : 20
    \    }
    \}

    function! g:ref_source_webdict_sites.alc.filter(content) abort
        let l:content = s:remove_wasted_blank_lines(a:content)
        let l:content = substitute(l:content, '<a href=[^>]\+>', '', 'g')
        return l:content
    endfunction

    nnoremap <Space>r <Nop>
    nnoremap <Space>ra :<C-U>Ref webdict alc<Space>
    nnoremap <Space>ra<Space> :<C-U>call histadd(':', 'Ref webdict alc ' . expand('<cword>'))<CR>:<UP><CR>
    nnoremap <Space>rw :<C-U>Ref webdict weblio<Space>
    nnoremap <Space>rw<Space> :<C-U>call histadd(':', 'Ref webdict weblio ' . expand('<cword>'))<CR>:<UP><CR>
'''

[[plugins]]
repo = 'mattn/wwwrenderer-vim'
if = "executable('curl')"
depends = 'webapi-vim'

[[plugins]]
repo = 'mattn/webapi-vim'
if = "executable('curl') || executable('wget')"

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
   let g:undotree_WindowLayout = 3
   let g:undotree_HelpLine = 0
'''

[[plugins]]
repo = 'will133/vim-dirdiff'

[[plugins]]
repo = 'oka-h/re-window.vim'
if = "g:Satisfy_vim_version(800) || has('nvim')"
hook_add = '''
    NXmap <Space>w [rewindow]
    NXnoremap [rewindow] <Nop>

    for s:key in ['h', 'j', 'k', 'l', 'H', 'J', 'K', 'L']
        execute 'NXmap [rewindow]' . s:key '<Plug>(rewindow-reopen-' . s:key . ')'
    endfor

    NXmap <C-W>o     <Plug>(rewindow-only)
    NXmap <C-W><C-O> <Plug>(rewindow-only)

    if g:is_my_layout
        NXmap <C-W>ay <Plug>(rewindow-tabclose)
    else
        NXmap <C-W>aq <Plug>(rewindow-tabclose)
    endif
'''

[[plugins]]
repo = 'kana/vim-submode'
if = "g:Satisfy_vim_version(702) || has('nvim')"
hook_source = '''
    call submode#enter_with('winsize', 'n', '', '<C-W>+', '<C-W>+')
    call submode#enter_with('winsize', 'n', '', '<C-W>-', '<C-W>-')
    call submode#enter_with('winsize', 'n', '', '<C-W>>', '<C-W>>')
    call submode#enter_with('winsize', 'n', '', '<C-W><', '<C-W><')
    call submode#map('winsize', 'n', '', '+', '<C-W>+')
    call submode#map('winsize', 'n', '', '-', '<C-W>-')
    call submode#map('winsize', 'n', '', '>', '<C-W>>')
    call submode#map('winsize', 'n', '', '<', '<C-W><')
'''
# }}}

# {{{ Complete plugins
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
if = "g:Satisfy_vim_version(800) || has('nvim')"
on_i = 1
hook_add = '''
    let g:asyncomplete_auto_popup = 1
    let g:asyncomplete_auto_completeopt = 1

    inoremap <expr> <CR> pumvisible() ? '<C-Y><CR>' : '<CR>'
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
if = "g:Satisfy_vim_version(800) || has('nvim')"
depends = ['asyncomplete.vim', 'neosnippet.vim']
hook_add = '''
    augroup vimrc_asyncomplete_neosnippet
        autocmd!
        autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
        \   'name': 'neosnippet',
        \   'allowlist': ['*'],
        \   'completor': function('asyncomplete#sources#neosnippet#completor')
        \}))
    augroup END
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
if = "g:Satisfy_vim_version(704) || has('nvim')"
on_i = 1
hook_add = '''
    imap <C-K> <Plug>(neosnippet_expand_or_jump)
    smap <C-K> <Plug>(neosnippet_expand_or_jump)

    if has('conceal')
        set conceallevel=2
        set concealcursor=niv
    endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
if = "g:Satisfy_vim_version(704) || has('nvim')"
hook_add = '''
    let g:neosnippet#snippets_directory = [
    \   g:plugins_dir . expand('/repos/github.com/Shougo/neosnippet-snippets/snippets/'),
    \   g:dotfiles_vim_dir . expand('/snippets')
    \]
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
if = "g:Satisfy_vim_version(800) || has('nvim')"
hook_add = '''
    let g:lsp_diagnostics_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1

    augroup vimrc_lsp_enable
        autocmd!
        autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END

    function! s:on_lsp_buffer_enabled() abort
        setlocal omnifunc=lsp#complete
        nmap <buffer> <Space>? <Plug>(lsp-hover)
        if g:is_my_layout
            nmap <buffer> + <Plug>(lsp-definition)
        else
            nmap <buffer> <C-]> <Plug>(lsp-definition)
        endif
    endfunction
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = 'vim-lsp'
# }}}

# {{{ Appearance plugins
[[plugins]]
repo = 'oka-h/yozakura.vim'
hook_add = '''
    augroup vimrc_yozakura
        autocmd!
        autocmd VimEnter * colorscheme yozakura
    augroup END
'''

[[plugins]]
repo = 'oka-h/stare-tab.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_source = '''
    let g:indentLine_fileTypeExclude = ['help', 'tex', 'text']
    let g:indentLine_bufNameExclude = ['term://.//*']
    let g:indentLine_color_term = 236
    let g:indentLine_char = '|'
'''
# }}}

# {{{ Motion plugins
[[plugins]]
repo = 'haya14busa/vim-edgemotion'
if = "g:Satisfy_vim_version(704, 313) || has('nvim')"
on_map = '<Plug>(edgemotion-'
hook_add = '''
    NXOmap <Space>j <Plug>(edgemotion-j)
    NXOmap <Space>k <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'fuenor/jpmoveword.vim'
on_map = ['<Plug>EolMove_', '<Plug>JpMove_', '<Plug>JpTextObjct']
hook_add = '''
    let g:jpmoveword_enable_WBE = 0
    let g:moveword_enable_wbe = 0
    let g:jpmoveword_separator = '、。！（），．？'

    nmap <silent> w <Plug>EolMove_w
    nmap <silent> e <Plug>EolMove_b
    nmap <silent> b <Plug>EolMove_e
    nmap <silent> W <Plug>JpMove_nW
    omap <silent> W <Plug>JpMove_oW
    xmap <silent> W <Plug>JpMove_xW
    nmap <silent> E <Plug>JpMove_nB
    omap <silent> E <Plug>JpMove_oB
    xmap <silent> E <Plug>JpMove_xB
    nmap <silent> B <Plug>JpMove_nE
    omap <silent> B <Plug>JpMove_oE
    xmap <silent> B <Plug>JpMove_xE
    omap <silent> iW <Plug>JpTextObjctIon
    xmap <silent> iW <Plug>JpTextObjctIxn
    omap <silent> aW <Plug>JpTextObjctAon
    xmap <silent> aW <Plug>JpTextObjctAxn
'''

[[plugins]]
repo = 'deton/jasentence.vim'
if = "!has('kaoriya')"
on_map = '<Plug>JaSentenceTextObj'
hook_add = '''
    let g:jasentence_endpat = '[。！．？]\+'
    let g:jasentence_no_default_key_mappings = 1

    omap <silent> as <Plug>JaSentenceTextObjA
    omap <silent> is <Plug>JaSentenceTextObjI
    xmap <silent> as <Plug>JaSentenceTextObjVA
    xmap <silent> is <Plug>JaSentenceTextObjVI
'''
# }}}

# {{{ Edit plugins
[[plugins]]
repo = 'kana/vim-operator-user'
if = "g:Satisfy_vim_version(702) || has('nvim')"

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-replace)'
hook_add = '''
    xmap p <Plug>(operator-replace)
'''

[[plugins]]
repo = 'tpope/vim-surround'
on_map = ['<Plug>Dsurround', '<Plug>Csurround', '<Plug>CSurround', '<Plug>Ysurround',
    '<Plug>YSurround', '<Plug>Yssurround', '<Plug>YSsurround', '<Plug>VSurround', '<Plug>VgSurround']
hook_add = '''
    let g:surround_no_mappings = 1
    let g:surround_no_insert_mappings = 1

    nmap ds  <Plug>Dsurround
    nmap cs  <Plug>Csurround
    nmap cS  <Plug>CSurround
    nmap ms  <Plug>Ysurround
    nmap mS  <Plug>YSurround
    nmap mss <Plug>Yssurround
    nmap mSs <Plug>YSsurround
    nmap mSS <Plug>YSsurround
    xmap S   <Plug>VSurround
    xmap gS  <Plug>VgSurround
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
    let g:tcomment_maps = 0
    let g:tcomment#mode_extra = 'B'

    if !(g:Satisfy_vim_version(702, 407) || has('nvim'))
        let g:tcomment#must_escape_expression_backslash = 1
    endif

    NXmap <silent> <Space>o <Plug>TComment_gc
    nmap <silent> <Space>oo <Plug>TComment_gcc
'''

[[plugins]]
repo = 'mattn/vim-lexiv'
if = "g:Satisfy_vim_version(801) || has('nvim')"
on_i = 1

[[plugins]]
repo = 'h1mesuke/vim-alignta'
hook_add = '''
    nnoremap <silent> <Space>a :<C-U>set operatorfunc=<SID>alignta<CR>g@
    xnoremap <Space>a :Alignta<Space>

    function! s:alignta(type) abort
        call feedkeys("'[V']:Alignta ", 'n')
    endfunction
'''
# }}}

# {{{ Text object plugins
[[plugins]]
repo = 'kana/vim-textobj-user'
if = "g:Satisfy_vim_version(704) || has('nvim')"

[[plugins]]
repo = 'anyakichi/vim-textobj-subword'
depends = 'vim-textobj-user'
on_map = '<Plug>(textobj-subword-'
hook_add = '''
    if g:is_my_layout
        NXOmap - <Plug>(textobj-subword-n)
        NXOmap _ <Plug>(textobj-subword-p)
        XOmap a- <Plug>(textobj-subword-a)
        XOmap a_ <Plug>(textobj-subword-a)
        XOmap i- <Plug>(textobj-subword-i)
        XOmap i_ <Plug>(textobj-subword-i)
    else
        NXOmap ] <Plug>(textobj-subword-n)
        NXOmap } <Plug>(textobj-subword-p)
        XOmap a] <Plug>(textobj-subword-a)
        XOmap a} <Plug>(textobj-subword-a)
        XOmap i] <Plug>(textobj-subword-i)
        XOmap i} <Plug>(textobj-subword-i)
    endif
'''

[[plugins]]
repo = 'kana/vim-textobj-function'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'anyakichi/vim-textobj-xbrackets'
depends = 'vim-textobj-user'
hook_add = '''
    let g:textobj_xbrackets_extra_iskeyword = '*.:'
'''

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
# }}}

# {{{ Filetype plugins
[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
if = "g:Is_filetype_enabled('cs')"
on_ft = ['cs', 'csi', 'csx']
hook_post_update = '''
    let s:build_cmd = g:is_windows ? 'msbuild' : 'xbuild'
    let g:dein#plugin.build = s:build_cmd . ' server/OmniSharp.sln'
'''
hook_add = '''
    augroup vimrc_omnisharp
        autocmd!

        if g:is_my_layout
            autocmd FileType cs,csi,csx nmap <buffer> + <Plug>(omnisharp_go_to_definition)
        else
            autocmd FileType cs,csi,csx nmap <buffer> <C-]> <Plug>(omnisharp_go_to_definition)
        endif
    augroup END
'''

[[plugins]]
repo = 'PProvost/vim-ps1'
if = "g:is_windows || g:Is_filetype_enabled('ps1')"

[[plugins]]
repo = 'bps/vim-textobj-python'
if = "g:Is_filetype_enabled('python')"
depends = 'vim-textobj-user'
on_ft = 'python'

[[plugins]]
repo = 'inkarkat/vim-SyntaxRange'
if = "g:Satisfy_vim_version(700) || has('nvim')"
on_path = '.toml'
hook_add = '''
    augroup vimrc_syntax_range
        autocmd!
        autocmd BufWinEnter *.toml call s:syntax_range_toml()
    augroup END

    function! s:syntax_range_toml() abort
        let l:hooks = ['add', 'done_update', 'post_source', 'post_update', 'source']
        let l:start = '^\s*hook_\%('. join(l:hooks, '\|') . '\)\s*=\s*\zs%s$'
        call SyntaxRange#Include(printf(l:start, repeat("'", 3)), repeat("'", 3), 'vim', 'Constant')
        call SyntaxRange#Include(printf(l:start, repeat('"', 3)), repeat('"', 3), 'vim', 'Constant')
    endfunction
'''
# }}}
